"""
Django settings for Project_Final project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os.path
from pathlib import Path
import environ
from api_oauth2.utils import signed_token_generator
from posixpath import join
from api_oauth2.scopes import (
    primary_scopes,
    default_scopes,
)

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'drf_yasg',
    'oauth2_provider',
    'api_oauth2',
    'api_base',
    'api_authservices',
    'api_users',
    'api_departments',
    'api_offices',
    'api_fields',
    'django_filters',
    'api_services',
    'api_news',
    'api_files',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = 'core.urls'

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
        }
    }
}

API_HOST = env("API_HOST")
API_PORT = env("API_PORT")
OAUTH_SCHEME = "http" if API_HOST in ["127.0.0.1", "localhost"] else "https"
OAUTH_PORT = ":" + API_PORT if API_PORT is not None else ""
OAUTH_URL = OAUTH_SCHEME + "://" + API_HOST + OAUTH_PORT

# config oauth2
PRIVATE_KEY_FILE = env("PRIVATE_KEY_FILE", default="jwt")
PRIVATE_KEY_PATH = join(BASE_DIR, PRIVATE_KEY_FILE)
with open(PRIVATE_KEY_PATH) as f:
    PRIVATE_PEM = f.read()
with open(PRIVATE_KEY_PATH + ".pub") as f:
    PUBLIC_KEY = f.read()

SCOPES = primary_scopes
DEFAULT_SCOPES = default_scopes
DEFAULT_SCOPES = {key: DEFAULT_SCOPES[key]
                  for key in DEFAULT_SCOPES if key in SCOPES}

OAUTH2_PROVIDER = {
    "ACCESS_TOKEN_EXPIRE_SECONDS": 3600,
    "ACCESS_TOKEN_GENERATOR": signed_token_generator(PRIVATE_PEM, issuer="damelagi"),
    "REFRESH_TOKEN_GENERATOR": "oauthlib.oauth2.rfc6749.tokens.random_token_generator",
    "OAUTH2_VALIDATOR_CLASS": "api_oauth2.pre_configured.CustomOAuth2Validator",
    "ROTATE_REFRESH_TOKEN": True,
    "REFRESH_TOKEN_GRACE_PERIOD_SECONDS": 4000,
    "SCOPES": SCOPES,
    "DEFAULT_SCOPES": DEFAULT_SCOPES,
}

# Application config
APP_NAME = env.str("APP_NAME")
SUPER_ADMIN_EMAIL = env.str("SUPER_ADMIN_EMAIL")
SUPER_ADMIN_PASSWORD = env.str("SUPER_ADMIN_PASSWORD")
NBF_TIME = 0
DEFAULT_CLIENT_SECRET = env("CLIENT_SECRET")
DEFAULT_CLIENT_ID = env("CLIENT_ID")
TWILIO_PHONE = env("TWILIO_PHONE")
TWILIO_ACCOUNT_SID = env("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = env("TWILIO_AUTH_TOKEN")

OAUTH2_PROVIDER_ACCESS_TOKEN_MODEL = "api_oauth2.AccessToken"
OAUTH2_PROVIDER_APPLICATION_MODEL = "api_oauth2.Application"
OAUTH2_PROVIDER_REFRESH_TOKEN_MODEL = "api_oauth2.RefreshToken"
OAUTH2_PROVIDER_GRANT_MODEL = "api_oauth2.Grant"
OAUTH2_PROVIDER_ID_TOKEN_MODEL = "api_oauth2.IDToken"

AUTHENTICATION_BACKENDS = (
    "oauth2_provider.backends.OAuth2Backend",
    "django.contrib.auth.backends.ModelBackend",
)

# Config Django Rest framework
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "api_oauth2.permissions.oauth2_permissions.TokenHasActionScope"
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "oauth2_provider.contrib.rest_framework.OAuth2Authentication",
    ],
    "DEFAULT_PAGINATION_CLASS": "api_base.pagination.CustomPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        "ENGINE": "mysql.connector.django",
        "NAME": env("DB_NAME"),
        "USER": env("DB_USER"),
        "PASSWORD": env("DB_PASSWORD"),
        "HOST": env("DB_HOST"),
        "PORT": env("DB_PORT"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'api_users.User'

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Ho_Chi_Minh'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATIC_URL = 'static/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_USE_TLS = env('EMAIL_USE_TLS')
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = env('EMAIL_PORT')
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
